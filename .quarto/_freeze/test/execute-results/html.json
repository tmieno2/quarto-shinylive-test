{
  "hash": "2e9a202822e796acf4b25c331e704294",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Pairing {quarto-shinylive} and {quarto-webr}\nformat:\n  revealjs:\n    theme: [default, custom.scss]\n    fontsize: 1em\n    callout-icon: false\n    scrollable: true\n    echo: true\n    resources: \n      - shinylive-sw.js\nengine: knitr\nwebr:\n  packages: ['ggplot2', 'dplyr', 'sf', 'data.table'] # Install R packages on document open\n# autoload-packages: false       # Disable automatic loading of packages\n# show-startup-message: false    # Disable displaying status of webR initialization\n  cell-options:\n    editor-font-scale: 0.7\nfilters:\n  - webr\n  - shinylive\n---\n\n\n## `{quarto-shinylive}`\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui <- page_sidebar(\n  sidebar = sidebar(\n    open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width = 1100)\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n\n  output$plot <- renderPlot(\n    {\n      hist(data(),\n        breaks = 40,\n        xlim = c(-2, 2),\n        ylim = c(0, 1),\n        lty = \"blank\",\n        xlab = \"value\",\n        freq = FALSE,\n        main = \"\"\n      )\n\n      x <- seq(from = -2, to = 2, length.out = 500)\n      y <- dnorm(x)\n      lines(x, y, lwd = 1.5)\n\n      lwd <- 5\n      abline(v = 0, col = \"red\", lwd = lwd, lty = 2)\n      abline(v = mean(data()), col = \"blue\", lwd = lwd, lty = 1)\n\n      legend(\n        legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n        col = c(\"black\", \"red\", \"blue\"),\n        lty = c(1, 2, 1),\n        lwd = c(1, lwd, lwd),\n        x = 1,\n        y = 0.9\n      )\n    },\n    res = 140\n  )\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n\n## `{quarto-webr}`\n\n```{webr-r}\nprint(\"hello quarto-webr world!\")\n```\n",
    "supporting": [
      "test_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}